from http.server import BaseHTTPRequestHandler, HTTPServer
import json

# DÃ©finition d'une classe qui gÃ¨re les requÃªtes HTTP


class SimpleAPIHandler(BaseHTTPRequestHandler):
    """
    Classe de gestion des requÃªtes HTTP pour une API simple.
    Elle redÃ©finit la mÃ©thode do_GET() pour gÃ©rer diffÃ©rents endpoints :
    - /         â†’ renvoie un message texte simple
    - /data     â†’ renvoie un jeu de donnÃ©es JSON
    - /status   â†’ renvoie "OK" pour vÃ©rifier le statut du serveur
    - autres    â†’ renvoie une erreur 404
    """

    def do_GET(self):
        """GÃ¨re les requÃªtes HTTP GET envoyÃ©es au serveur."""

        # RÃ©cupÃ¨re le chemin de la requÃªte (ex: '/', '/data', '/status', etc.)
        path = self.path

        # Endpoint racine "/"
        if path == "/":
            self.send_response(200)  # Code de succÃ¨s HTTP 200 (OK)
            self.send_header("Content-Type", "text/plain")
            # Type de contenu texte brut
            self.end_headers()  # Fin des en-tÃªtes
            self.wfile.write(b"Hello, this is a simple API!")
            # RÃ©ponse envoyÃ©e au client

        # Endpoint "/data" â†’ renvoie un JSON
        elif path == "/data":
            data = {
                "name": "John",
                "age": 30,
                "city": "New York"
            }
            response = json.dumps(data).encode("utf-8")
            # Conversion en texte JSON (bytes)
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(response)

        # Endpoint "/status" â†’ renvoie "OK"
        elif path == "/status":
            self.send_response(200)
            self.send_header("Content-Type", "text/plain")
            self.end_headers()
            self.wfile.write(b"OK")

        # Endpoint "/info" â†’ renvoie des informations sur l'API
        elif path == "/info":
            info = {
                "version": "1.0",
                "description": "A simple API built with http.server"
            }
            response = json.dumps(info).encode("utf-8")
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(response)

        # Si le chemin ne correspond Ã  aucun endpoint connu â†’ erreur 404
        else:
            self.send_response(404)
            self.send_header("Content-Type", "text/plain")
            self.end_headers()
            self.wfile.write(b"Endpoint not found")


# Point d'entrÃ©e principal du programme
if __name__ == "__main__":
    # CrÃ©ation d'un serveur HTTP Ã©coutant sur le port 8000
    server_address = ("", 8000)
    httpd = HTTPServer(server_address, SimpleAPIHandler)

    print("ğŸš€ Serveur en cours d'exÃ©cution sur http://localhost:8000")
    try:
        # Boucle principale : le serveur attend les requÃªtes en continu
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nğŸ›‘ ArrÃªt du serveur.")
        httpd.server_close()
